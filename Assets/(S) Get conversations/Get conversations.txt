(1)
(Get conversations)
(useGetConversations.js)
import { useEffect, useState } from "react";
import toast from "react-hot-toast";

const useGetConversations = () => {
    const [loading, setLoading] = useState(false);
    const [conversations, setConversations] = useState([]);

    useEffect(() => {
        const getConversations = async () => {
            setLoading(true);
            try {
                const res  = await fetch("/api/users");
                const data = await res.json();
                if (data.error){
                    throw new Error(data.error);
                }
                setConversations(data);
            } catch (error) {
              toast.error(error.message);
            } finally {
              setLoading(false);
            }
        };

        getConversations();
    }, []);

    return { loading, conversations};
};
export default useGetConversations;


(Conversations.jsx)
import Conversation from "./Conversation";
import useGetConversations from "../../hooks/useGetConversations";

const Conversations = () => {
	const {loading, conversations} = useGetConversations();
    console.log("CONVERSATIONS:", conversations);
	return (
		<div className='py-2 flex flex-col overflow-auto'>
			<Conversation />
			<Conversation />
			<Conversation />
			<Conversation />
			<Conversation />
			<Conversation />
		</div>
	);
};
export default Conversations;



(2)
(useConversation.js)
import { create } from "zustand";

const useConversation = create((set) => ({
    selectedConversation: null,
    setSelectedConversation: (selectedConversation) => set({selectedConversation}),
    messages: [],
    setMessages: (messages) => set({messages}),
}));

export default useConversation;


(Conversation.jsx)
const Conversation = ({conversation,lastIdx,emoji}) => {
	return (
		<>
			<div className='flex gap-2 items-center hover:bg-sky-500 rounded p-2 py-1 cursor-pointer'>
				<div className='avatar online'>
					<div className='w-12 rounded-full'>
						<img
							src={conversation.profilePic}
							alt='user avatar'
						/>
					</div>
				</div>

				<div className='flex flex-col flex-1'>
					<div className='flex gap-3 justify-between'>
						<p className='font-bold text-gray-200'>{conversation.fullName}</p>
						<span className='text-xl'>{emoji}</span>
					</div>
				</div>
			</div>

			{!lastIdx && <div className='divider my-0 py-0 h-1' />}
		</>
	);
};
export default Conversation;


(Conversations.jsx)
import useGetConversations from "../../hooks/useGetConversations";
import Conversation from "./Conversation";
import { getRandomEmoji } from "../../utils/emojis";

const Conversations = () => {
	const {loading, conversations} = useGetConversations();
	return (
		<div className="py-2 flex flex-col overflow-auto">
			{conversations.map((conversation, idx) => (
				<Conversation
				  key={conversation._id}
				  conversation={conversation}
				  emoji={getRandomEmoji()}
				  lastIdx={idx === conversations.length - 1}
				  />
			))}

			{loading ? <span className="loading loading-spinner mx-auto"></span> : null}
		</div>
	);
};
export default Conversations;



(3)
(MessageContainer.jsx)
import Messages from "./Messages";
import MessageInput from "./MessageInput";
import { TiMessages } from "react-icons/ti";
import useConversation from "../../zustand/useConversation.js";
import { useEffect } from "react";

const MessageContainer = () => {
	const { selectedConversation, setSelectedConversation } = useConversation();

	useEffect(() => {
		// cleanup function (unmounts)
		return () => setSelectedConversation(null);
	}, [setSelectedConversation]);

	return (
		<div className='md:min-w-[450px] flex flex-col'>
            {!selectedConversation ? (
              <NoChatSelected />
            )  : (
			   <>
				{/* Header */}
				<div className='bg-slate-500 px-4 py-2 mb-2'>
					<span className='label-text'>To:</span> <span className='text-gray-900 font-bold'>{selectedConversation.fullName}</span>
				</div>
				<Messages />
				<MessageInput />
			</>
            )}
		</div>
	);
};
export default MessageContainer;

const NoChatSelected = () => {
	return (
		<div className='flex items-center justify-center w-full h-full'>
			<div className='px-4 text-center sm:text-lg md:text-xl text-gray-200 font-semibold flex flex-col items-center gap-2'>
				<p>Welcome üëã John Doe ‚ùÑÔ∏è</p>
				<p>Select a chat to start messaging</p>
				<TiMessages className='text-3xl md:text-6xl text-center' />
			</div>
		</div>
	);
};


(Conversation.jsx)
import useConversation from "../../zustand/useConversation.js";

const Conversation = ({ conversation, lastIdx, emoji }) => {
	const { selectedConversation, setSelectedConversation } = useConversation();

	const isSelected = selectedConversation?._id === conversation._id;

	return (
	  <>
		<div className={`flex gap-2 items-center hover:bg-sky-500 rounded p-2 py-1 cursor-pointer ${isSelected ? "bg-sky-500" : ""}`}
		onClick={() => setSelectedConversation(conversation)}>
		  <div className="avatar online">
			<div className="w-12 rounded-full">
			  <img src={conversation.profilePic} alt="user avatar" />
			</div>
		  </div>

		  <div className="flex flex-col flex-1">
			<div className="flex gap-3 justify-between">
			  <p className="font-bold">{conversation.fullName}</p>
			  <span className="text-xl">{emoji}</span>
			</div>
		  </div>
		</div>

		{!lastIdx && <div className="divider my-0 py-0 h-1" />}
	  </>
	);
  };

  export default Conversation;
