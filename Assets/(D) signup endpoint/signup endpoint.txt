(1)
(signup endpoint)
(auth.controllers.js)
import User from "../models/user.model.js";

export const signup = async (req, res) => {
  try {
    const { fullName,username,password,confirmPassword,gender } = req.body;

    if (password !== confirmPassword) {
      return res.status(400).json({ message: "Password does not match" });
    }

    const user = await User.findOne({username});

    if (user) {
      return res.status(400).json({error:"Username already exists"})
    }

    // HASH PASSWORD HERE

    // https://avatar-placeholder.iran.liara.run/

    const boyProfilePic  = `https://avatar.iran.liara.run/public/boy?username=${username}`;
    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;

    const newUser = new User({
      fullName,
      username,
      password,
      gender,
      profilePic: gender === "male" ? boyProfilePic : girlProfilePic
    })

    await newUser.save();

    res.status(201).json({
      _id: newUser._id,
      fullName: newUser.fullName,
      username: newUser.username,
      profilePic: newUser.profilePic
    })

  } catch (error) {
    console.log("Error in signup controller", error.message);
    res.status(500).json({error:"Internal server error"})
  }
};

export const login =  async (req, res) => {
  console.log("loginUser");
};

export const logout = async (req, res) => {
  console.log("logoutUser");
};
Terminal:
POSTMAN:
POST:
http://localhost:5000/api/auth/signup
{
    // fullName,username,password,confirmPassword,gender
    "fullName": "Sehar Ali",
    "username": "seharali",
    "password": "123456",
    "confirmPassword": "123456",
    "gender": "male"
}
Response:
{
    "_id": "667c4535a8a56ff1fbe30033",
    "fullName": "Sehar Ali",
    "username": "seharali",
    "profilePic": "https://avatar.iran.liara.run/public/boy?username=seharali"
}
MongoDB:
_id: ObjectId('667c4535a8a56ff1fbe30033')
fullName: "Sehar Ali"
username: "seharali"
password: "123456"
gender:   "male"
profilePic: "https://avatar.iran.liara.run/public/boy?username=seharali"
__v: 0



(2)
(auth.controllers.js)
import bcrypt from "bcryptjs";
const salt = await bcrypt.genSalt(10);
const hashedPassword = await bcrypt.hash(password, salt);
password: hashedPassword
else {
  res.status(400).json({error: "Invalid user data"});
}
